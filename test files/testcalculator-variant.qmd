---
title: Test calculator
format: html
server: shiny
---

```{r}
#| context: setup
#| include: false

library(shiny)
library(ggplot2)
library(bslib)  

bs_theme_dependencies(bs_theme(preset = "bootstrap")) |>
  lapply(function(x) {
    if (x$name == "bootstrap") {
      x$name <- "bootstrap-from-bslib"
    }
    x
  }) |>
  htmltools::tagList()
```


```{r}
sidebarPanel(
  radioButtons(
    "mode", "After Submit, show:",
    choices = c("Graphs A & B" = "ab", "Graphs C, D & E" = "cde"),
    selected = "ab"
  ),
  numericInput("n",   "Sample size (n)", value = 200, min = 10, step = 10),
  numericInput("mu",  "Mean (μ)",        value = 0,   step = 0.5),
  numericInput("sd",  "SD (σ)",          value = 1,   min = 0.1, step = 0.1),
  actionButton("submit", "Submit", class = "btn-primary"))
```


```{r}
uiOutput("plots_nav")
```


```{r}
#| context: server



# --- App state: defaults at startup (A&B with default params) ---
state <- reactiveVal(list(
  mode = "ab",
  n = 200,
  mu = 0,
  sd = 1
))

# When Submit is clicked, update the state from user inputs
observeEvent(input$submit, {
  state(list(
    mode = input$mode,
    n = input$n,
    mu = input$mu,
    sd = max(0.0001, input$sd)  # avoid sd=0
  ))
})

# Build the navset (A&B by default; A&B or CDE after Submit)
output$plots_nav <- renderUI({
  s <- state()
  if (s$mode == "ab") {
    navset_card_tab(
      nav_panel("A", plotOutput("plotA", height = 300)),
      nav_panel("B", plotOutput("plotB", height = 300)))
  } else {
    navset_card_tab(
      nav_panel("C", plotOutput("plotC", height = 300)),
      nav_panel("D", plotOutput("plotD", height = 300)),
      nav_panel("E", plotOutput("plotE", height = 300)))
  }
})

# ---------- Data generators based on current state ----------
data_ab <- reactive({
  s <- state()
  x <- rnorm(s$n, s$mu, s$sd)
  y <- x + rnorm(s$n, 0, s$sd/2 + 0.25)
  list(x = x, y = y)
})

data_cde <- reactive({
  s <- state()
  # Use same parameters but make different views
  x <- rnorm(s$n, s$mu, s$sd)
  y <- rnorm(s$n, s$mu, s$sd * 1.2)
  g <- factor(sample(c("G1","G2","G3"), size = s$n, replace = TRUE))
  list(x = x, y = y, g = g)
})

# ---------- Plots A & B (always defined; shown when mode == "ab") ----------
output$plotA <- renderPlot({
  s <- state()
  dat <- data_ab()
  ggplot(data.frame(x = dat$x), aes(x)) +
    geom_histogram(bins = 30) +
    labs(
      title = sprintf("A: Histogram (n=%d, μ=%.2f, σ=%.2f)", s$n, s$mu, s$sd),
      x = "x", y = "count"
    ) +
    theme_minimal()
})

output$plotB <- renderPlot({
  s <- state()
  dat <- data_ab()
  ggplot(data.frame(x = dat$x, y = dat$y), aes(x, y)) +
    geom_point(alpha = 0.6) +
    geom_smooth(method = "lm", se = FALSE) +
    labs(
      title = sprintf("B: Scatter with trend (n=%d)", s$n),
      x = "x", y = "y"
    ) +
    theme_minimal()
})

# ---------- Plots C, D & E (shown when mode == "cde") ----------
output$plotC <- renderPlot({
  s <- state()
  dat <- data_cde()
  ggplot(data.frame(x = dat$x), aes(x)) +
    geom_density() +
    labs(
      title = sprintf("C: Density of x (n=%d, μ=%.2f, σ=%.2f)", s$n, s$mu, s$sd),
      x = "x", y = "density"
    ) +
    theme_minimal()
})

output$plotD <- renderPlot({
  dat <- data_cde()
  ggplot(data.frame(x = dat$x, y = dat$y), aes(x, y)) +
    geom_hex(bins = 20) +
    labs(
      title = "D: 2D binned (hex) view",
      x = "x", y = "y"
    ) +
    theme_minimal()
})

output$plotE <- renderPlot({
  dat <- data_cde()
  ggplot(data.frame(g = dat$g, x = dat$x), aes(g, x)) +
    geom_boxplot() +
    labs(
      title = "E: Boxplots by group",
      x = "group", y = "x"
    ) +
    theme_minimal()
})
```