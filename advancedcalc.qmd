---
title: "ICARUS Power Planner — Solar Panels & Advanced Batteries"
format: html
execute:
  echo: false
warning: false
message: false
server: shiny
---

```{r}
#| context: setup
#| label: setup

library(shiny)
library(ggplot2)

# ----- Constants (ICARUS) -----
FRIDGE_P   <- 500      # J/s
FREEZER_P  <- 2500     # J/s
PANEL_P    <- 6000     # J/s per solar panel
BAT_CAP    <- 6000000  # J per advanced battery rack
BAT_RATE   <- 10000    # J/s per advanced battery rack
SEC_PER_IG_HOUR <- 2400 / 13  # 13 in-game hours of night = 40 min = 2400 s

# ----- Helper functions -----
calc_requirements <- function(n_fridge, n_freezer, daylight_hours) {
  # load (J/s)
  P <- n_fridge * FRIDGE_P + n_freezer * FREEZER_P
  
  # durations in seconds (real-time, using fixed mapping)
  day_s  <- daylight_hours * SEC_PER_IG_HOUR
  night_s <- (24 - daylight_hours) * SEC_PER_IG_HOUR
  
  # panels: must satisfy both instantaneous AND energy over the day
  panels_instant <- ceiling(P / PANEL_P)
  panels_energy  <- ceiling(P * 24 / (PANEL_P * daylight_hours))
  panels_needed  <- max(panels_instant, panels_energy)
  
  # batteries: capacity for night + discharge rate at night
  night_energy <- P * night_s
  bat_capacity_needed <- ceiling(night_energy / BAT_CAP)
  bat_rate_needed     <- ceiling(P / BAT_RATE)
  batteries_needed    <- max(bat_capacity_needed, bat_rate_needed)
  
  list(
    P = P,
    day_s = day_s,
    night_s = night_s,
    night_energy = night_energy,
    panels_instant = panels_instant,
    panels_energy = panels_energy,
    panels_needed = panels_needed,
    bat_capacity_needed = bat_capacity_needed,
    bat_rate_needed = bat_rate_needed,
    batteries_needed = batteries_needed
  )
}

sweep_variable <- function(var_seq, fixed_fridge, fixed_freezer, fixed_daylight, vary = c("fridge","freezer","daylight")) {
  vary <- match.arg(vary)
  df <- data.frame()
  for (v in var_seq) {
    if (vary == "fridge") {
      nF <- v; nZ <- fixed_freezer; dh <- fixed_daylight
    } else if (vary == "freezer") {
      nF <- fixed_fridge; nZ <- v; dh <- fixed_daylight
    } else {
      nF <- fixed_fridge; nZ <- fixed_freezer; dh <- v
    }
    req <- calc_requirements(nF, nZ, dh)
    df <- rbind(df, data.frame(
      x_batteries = req$batteries_needed,
      y_panels    = req$panels_needed,
      var_value   = v
    ))
  }
  df
}
```

```{r}
#| panel: sidebar

numericInput("n_fridge", "Number of Refrigerators", value = 2, min = 0, step = 1)
numericInput("n_freezer", "Number of Freezers", value = 10, min = 0, step = 1)
numericInput("daylight", "Hours of Daylight (0–24)", value = 11, min = 1, max = 23, step = 0.5)
helpText("Assumptions: Fridge 500 J/s, Freezer 2,500 J/s, Solar 6,000 J/s, Battery 6,000,000 J & 10,000 J/s.")
```

# Visualisation

```{r}
#| panel: fill

plotOutput("plots_grid")
```

# Calculations

```{r}
#| panel: fill

verbatimTextOutput("calc_steps")
```


```{r}
#| context: server

server <- function(input, output, session) {
  
  req_reactive <- reactive({
    calc_requirements(input$n_fridge, input$n_freezer, input$daylight)
  })
  
  output$plots_grid <- renderPlot({
    
    fr_range <- seq(0, max(1, input$n_fridge * 2), by = max(1, floor(max(1, input$n_fridge * 2) / 20)))
    if (length(fr_range) < 2) fr_range <- 0:5
    
    frz_range <- seq(0, max(1, input$n_freezer * 2), by = max(1, floor(max(1, input$n_freezer * 2) / 20)))
    if (length(frz_range) < 2) frz_range <- 0:5
    
    dl_min <- 1
    dl_max <- 23
    day_range <- seq(max(dl_min, input$daylight - 4), min(dl_max, input$daylight + 4), length.out = 9)
    
    df1 <- sweep_variable(fr_range, input$n_fridge, input$n_freezer, input$daylight, vary = "fridge")
    p1 <- ggplot(df1, aes(x = x_batteries, y = y_panels)) +
      geom_line() + geom_point() +
      labs(
        title = "Vary Refrigerators (Freezers & Daylight fixed)",
        x = "Batteries (Advanced Racks)",
        y = "Solar Panels"
      ) +
      theme_minimal()
    
    df2 <- sweep_variable(frz_range, input$n_fridge, input$n_freezer, input$daylight, vary = "freezer")
    p2 <- ggplot(df2, aes(x = x_batteries, y = y_panels)) +
      geom_line() + geom_point() +
      labs(
        title = "Vary Freezers (Refrigerators & Daylight fixed)",
        x = "Batteries (Advanced Racks)",
        y = "Solar Panels"
      ) +
      theme_minimal()
    
    df3 <- sweep_variable(day_range, input$n_fridge, input$n_freezer, input$daylight, vary = "daylight")
    p3 <- ggplot(df3, aes(x = x_batteries, y = y_panels)) +
      geom_line() + geom_point() +
      labs(
        title = "Vary Daylight Hours (Fridges & Freezers fixed)",
        x = "Batteries (Advanced Racks)",
        y = "Solar Panels"
      ) +
      theme_minimal()
    
    (p1 + p2) / (p3 + plot_spacer())
})
  
  output$calc_steps <- renderText({
    r <- req_reactive()
    paste0(
      "Given inputs:\n",
      "  Refrigerators: ", input$n_fridge, "\n",
      "  Freezers:      ", input$n_freezer, "\n",
      "  Daylight:      ", input$daylight, " in-game hours (",
      round(input$daylight * SEC_PER_IG_HOUR), " real seconds)\n",
      "\n",
      "1) Load P (J/s):\n",
      "   P = 500 * fridges + 2500 * freezers = ",
      500 * input$n_fridge, " + ", 2500 * input$n_freezer, " = ", r$P, " J/s\n",
      "\n",
      "2) Time mapping:\n",
      "   SEC_PER_IG_HOUR = 2400 / 13 ≈ ", round(SEC_PER_IG_HOUR, 3), " s/hour\n",
      "   Day seconds  = daylight_hours * SEC_PER_IG_HOUR = ",
      round(r$day_s, 1), " s\n",
      "   Night seconds = (24 - daylight_hours) * SEC_PER_IG_HOUR = ",
      round(r$night_s, 1), " s\n",
      "\n",
      "3) Solar panels:\n",
      "   Instantaneous constraint: ceil(P / 6000) = ", r$panels_instant, "\n",
      "   Energy balance over the day:\n",
      "     Need: Np * 6000 * day_s ≥ P * (day_s + night_s) = P * 24 * SEC_PER_IG_HOUR\n",
      "     Rearranged: Np ≥ P * 24 / (6000 * daylight_hours) = ",
      ceiling(r$P * 24 / (PANEL_P * input$daylight)), "\n",
      "   Panels needed = max(instant, energy) = ", r$panels_needed, "\n",
      "\n",
      "4) Batteries (Advanced racks):\n",
      "   Night energy = P * night_s = ", format(round(r$night_energy), big.mark=","), " J\n",
      "   Capacity constraint: ceil(night_energy / 6,000,000) = ", r$bat_capacity_needed, "\n",
      "   Discharge constraint: ceil(P / 10,000) = ", r$bat_rate_needed, "\n",
      "   Batteries needed = max(capacity, discharge) = ", r$batteries_needed, "\n",
      "\n",
      "These same formulas generate the three plots by sweeping one variable at a time while holding the others fixed,\n",
      "then plotting the resulting (Batteries, Panels) points and connecting them with a line."
    )
  })
}
```
