---
title: "ICARUS Power Planner — Solar Panels & Advanced Batteries"
format: html
execute:
  echo: false
warning: false
message: false
server: shiny
---

```{r}
#| context: setup
#| label: setup

library(shiny)
library(bslib)
library(ggplot2)
library(readr)

options("scipen"=10) 

# ---------------- Constants (ICARUS) ----------------
FRIDGE_P   <- 500      # J/s per refrigerator
FREEZER_P  <- 2500     # J/s per freezer
PANEL_P    <- 6000     # J/s per solar panel
BAT_CAP    <- 6000000  # J per advanced battery rack
BAT_RATE   <- 10000    # J/s per advanced battery rack

# Time mapping: 24 in-game hours = 70 real minutes
IG_24H_MIN <- 70
IG_24H_SEC <- 70 * 60
SEC_PER_IG_HR <- IG_24H_SEC / 24

calc_requirements <- function(n_fridge, n_freezer, daylight_hours) {
  # clamp daylight to (0,24) to avoid divide-by-zero
  dh <- max(0.01, min(23.99, daylight_hours))

  # total continuous load
  P <- n_fridge * FRIDGE_P + n_freezer * FREEZER_P

  # durations (real seconds)
  day_s   <- dh * SEC_PER_IG_HR
  night_s <- (24 - dh) * SEC_PER_IG_HR

  # Solar: must satisfy instantaneous AND energy balance over 24h
  panels_instant <- ceiling(P / PANEL_P)
  panels_energy  <- ceiling(P * 24 / (PANEL_P * dh))
  panels_needed  <- max(panels_instant, panels_energy)
  
  # Batteries: capacity for night + discharge rate at night load
  night_energy       <- P * night_s
  bat_capacity_need  <- ceiling(night_energy / BAT_CAP)
  bat_rate_need      <- ceiling(P / BAT_RATE)
  batteries_needed   <- max(bat_capacity_need, bat_rate_need)

  list(
    P = P,
    day_s = day_s,
    night_s = night_s,
    night_energy = night_energy,
    panels_instant = panels_instant,
    panels_energy = panels_energy,
    panels_needed = panels_needed,
    bat_capacity_needed = bat_capacity_need,
    bat_rate_needed = bat_rate_need,
    batteries_needed = batteries_needed,
    daylight = dh
  )
}
```

```{r}
#| label: ui

page_fillable(
  layout_columns(
    card(card_header("Inputs"),
         numericInput("n_fridge", "Number of Refrigerators", value = 2, min = 0, step = 1),
         numericInput("n_freezer", "Number of Freezers", value = 10, min = 0, step = 1),
         numericInput("daylight", "Hours of Daylight (0–24)", value = 11, min = 1, max = 23, step = 0.5),
         helpText("")),
    card(card_header("Visualizations")),
    col_widths = c(4, 8)),
  card(card_header("Calculations"),
       verbatimTextOutput("calc_steps")))
```


```{r}
#| context: server

tab <- "   "

# Parse user text inputs -> numeric (with basic clamping)
vals <- reactive({
  list(
    n_fridge = input$n_fridge,
    n_freezer = input$n_freezer,
    daylight = input$daylight
  )
})

# Run the calculations to get the values
req_reactive <- reactive({
    v <- vals()
    calc_requirements(v$n_fridge, v$n_freezer, v$daylight)
})

# Display the calculation steps
output$calc_steps <- renderText({

  v <- vals()
  r <- req_reactive()
  
  paste0(
  "Assumptions:\n",
  tab, "Refrigerators:    ", FRIDGE_P, " J/s draw\n",
  tab, "Freezers:         ", FREEZER_P, " J/s draw\n", 
  tab, "Solar panels:     ", PANEL_P, " J/s generation\n",
  tab, "Battery:          ", BAT_CAP, " J capacity\n",
  tab, "Battery:          ", BAT_RATE, " J/s discharge\n",
  tab, "24h cycle length: ", IG_24H_MIN, " real minutes",
  "\n",
  "Given inputs:\n",
  tab, "Refrigerators:    ", v$n_fridge, "\n",
  tab, "Freezers:         ", v$n_freezer, "\n",
  tab, "Daylight:         ", v$daylight, " in-game hours (",
  round(input$daylight * SEC_PER_IG_HR, 0),  " real seconds)\n",
  "\n",
  "1) Load P (J/s):\n",
  tab, "P = ", FRIDGE_P, " * fridges + ", FREEZER_P, " * freezers\n",
  tab, r$P, " J/s", " = ", round(FRIDGE_P * v$n_fridge, 0), " + ", round(FREEZER_P, 0) * v$n_freezer, "\n",
  "\n",
  "2) Time mapping:\n",
  tab, "Real seconds per in-game hour = day_cycle_length (", IG_24H_MIN, " min) * 60 seconds / 24 hours ≈ ", round(SEC_PER_IG_HR, 0), "s\n",
  tab, "Real seconds per in-game day  = daylight_hours * ", round(SEC_PER_IG_HR, 0), " = ", round(r$day_s, 0), " s\n",
  tab, "Real seconds per in-game night = nightime_hours = (24 - daylight_hours) * ", round(SEC_PER_IG_HR, 0), " = ", round(r$night_s, 0), " s\n",
  "\n",
  "3) Solar panels needed:\n",
  tab, "Daytime power need: ceiling(P / 6000) = ", r$panels_instant, "\n",
  tab, "Energy balance over 24h:\n",
  tab, tab, "Need: num_panels * panel_power * day_s ≥ P * (day_s + night_s) = P * 24 * SEC_PER_IG_HR\n",
  tab, tab, "Rearranged: P * 24 / (panel_power * day_s) = ", r$panels_energy, "\n",
  tab, "Panels needed = max(daytime_use, full_day_use) = ", r$panels_needed, "\n",
  "\n",
  "4) Batteries (advanced racks):\n",
  tab, "Night energy = P * night_s = ", format(round(r$night_energy), big.mark=","), " J\n",
  tab, "Capacity: ceiling of(night_energy / 6,000,000) = ", r$bat_capacity_needed, "\n",
  tab, "Discharge: ceiling of(P / 10,000) = ", r$bat_rate_needed, "\n",
  tab, "Batteries needed = max(capacity, discharge) = ", r$batteries_needed, "\n")
})
```
